今天我们了解一下C++的第一个Hello world程序


#include <iostream>

int main(int argc, char** argv)
{
    std::cout << "Hello world\n";
    return 0;
}


第一行是 #include <iostream>
这一行是包含了C++专用的输入输出头文件<iostream>，我们后续使用的std::cout就是由这个头文件提供。

可以发现，C++的头文件没有.h后缀。这是为了和C语言的标准库头文件加以区分。
C++中拥有所有的C语言头文件，但是都改了名。改名的规则是，前面加入c，后面删除.h。
比如<ctime> <cstdlib> <cmath> <cstring>等等，分别对应<time.h> <stdlib.h> <math.h> <string.h>

注意：不是所有以c开头的头文件都来源于C语言头文件。比如<complex>，是纯粹的C++头文件。
还有，由于<iostream>提供了完全可以替代<cstdio>的强大且方便的输入输出方式，所以一般不使用<cstdio>

我们的main函数中有默认的两个参数，这个叫做命令行参数。这个阶段我们暂时可以不用管它。

main函数的返回值一定是整数类型，大家千万注意不敢写成void main。
这是C++之父对void main的看法：
https://www.stroustrup.com/bs_faq2.html#void-main

【void main】

然后我们要了解C++的输入输出。从Hello world程序中，我们可以发现
std::cout << "Hello world\n";
会在屏幕上输出一行字符串Hello world。

其中std::cout是标准输出流，我们用两个尖箭头（其实是位左移运算符）指向它，在后面给定任意类型、任意数量的数据，数据之间也用<<分隔：

std::cout << "pi的值为" << 3.14 << '\n' << "1+1=" << 1+1;

输出结果为：
pi的值为3.14
1+1=2

我在<<的两侧加入了空格，因为<<是这一行中优先级最低的运算符。
在一行代码中，其优先级最低的运算符（最常见的是赋值等于号运算符）两侧应当加入空格，这是一个良好的代码习惯。
我们学习代码时，不只是要学习语法，还有学习我代码中的空格和空行。我只在代码规范需要空格的时候空格，在需要空行的时候空行。所以我所有的空格和空行也都是有代码规范意义的，不能省略

我们可以发现，std::cout可以自动适配其输出数据的类型。它不像printf需要手动适配其数据的类型
这种自动适配类型的技术叫做“重载”（zhong zai四声），我们将来会学到。

其实“重载”这个词我们以前见过。我们以前讲NULL和nullptr时说过，NULL是整数而不是真正的指针。它和指针的区别会在“重载”中体现。所以：
std::cout << NULL;      // 输出整数0
std::cout << nullptr;       // 输出"nullptr"
nullptr是空指针的意思。也就是说，nullptr被适配到输出指针的代码，而NULL被适配到输出整数的代码。这是很容易理解的，因为NULL本来就是整数0，它不是指针。
C++比C语言更加得“类型敏感”，因此在C++中我们应当使用nullptr代替NULL。

std::cout对类型的适配工作是在编译时，而printf对类型的适配是在运行时。这意味着std::cout往往比printf运行得更快（但是编译得更慢）
实践证明，程序被编译的次数往往远小于其被运行的次数。很多程序只编译寥寥几次，但是会发布给无数人运行无数次。因此，相比于编译速度而言，我们一般更加关心运行速度

再加上std::cout的类型安全，不担心类型不匹配的问题，故而更受C++程序员的喜爱。

当我们输出的代码写的比较多的时候，我们会发现std::cout的这名字实在是太麻烦了，能不能简化一下呢？
当然是可以的。

【simply】

std是C++中的名字空间，名字空间的知识会在将来介绍。由于cout定义在std名字空间中，所以默认需要先引用名字空间才能引用cout。
而using std::cout;这句代码的含义是，将std名字空间中的cout拿出，从而允许外界能直接使用cout。

我们以后也会经常用到using std::xxx来拿出标准库内的其他名字。

有时你会看见这样的代码：
cout << "Hello world" << endl;
其中std::endl是换行并刷新。注意这个刷新非常耗费性能而且根本没有什么卵用，它相当于C语言中的fflush(stdout)函数，而绝大多数人根本没见过这个函数，因为这个函数已经几乎没有用了，只会白白浪费性能
网络上盛传着cout的速度不及printf的谣言，其原因恰好是因为很多人在测试速度时误用了endl
C++之父对此发表过非常尖锐的看法：

【endl】

如果我是C++之父，我大概率会移除endl。不过C++之父认为C++应当尽可能多得保持对老代码和不规范代码的容忍与兼容。尽管是已经证实了不规范的一些语法，如果删除他们也会导致很多老代码和不规范的代码不得不大规模改动甚至废弃。
不得不说，真正的大佬其不仅其技术硕果累累，其胸怀也十分令人钦佩。
值得注意的是，C++对不规范代码的容忍也不能作为故意使用不规范语法的借口。

另外，我们不推荐使用 
using namespace std;
这行代码的意思是将std名字空间中的所有名字全部拿出。你不知道究竟拿出了哪些名字，这会导致恐怖的“撞名灾难”：


#include <bits/stdc++.h>        // 太疯狂！相当于导入了C++全部的头文件！

using namespace std;        // 灾难！std中所有的名字全部外泄

int max(int a, int b)       // 错误：和<algorithm>中的std::max函数撞名
{      
    char* string {"Hello"};     // 错误：和<string>中的std::string重名
    cout << string;
    int set {(a>b) ? a : b};        // 错误：和<set>中的std::set重名
    return set; 
}

int main(int argc, char** argv)
{
    int pair[] { 1, 2 };        // 错误：和<utility>中的std::pair重名
    int list[] { 3, 4, 5, 6 };      // 错误：和<list>中的std::list重名
    cout << max(pair[0], list[1]);      // 错误：重名的两个max函数，调用哪一个？
    return 0;
}


好在我们的编译器可以智能地处理这类撞名的问题，所以上面代码可以通过编译
但一定要注意以上代码极其不规范，而且很依赖编译器。

作业：

1.手敲我们的Hello world程序并编译运行它（F12是编译，F11是运行），注意代码排版

2.观看生机盎燃蘑菇灰在B站上发布的这个视频并回答下列问题：

【https://www.bilibili.com/video/BV1CH4y1Y7Cn/】

（1）下列说法正确的是：
A.即使是残血的cout也比printf更快
B.在测试cout的速度时应当用到endl
C.视频中的代码使用的等于号初始化是不规范的
D.C++有办法为printf加血

（2）遇到对C++不利的网络传言，你应该怎么办
A.盲目相信
B.盲目不信
C.问问网友
D.实践验证
