<h1 style="text-align:center">变量初始化</h1>
<hr/>

<div style="font-size:13px">
    在C++中，变量的初始化常常采用<strong style="color:red">花括号初始化</strong>的方式：
    <br/>

    <div style="color:blue; background-color:yellow;">
        int num {1}; // 定义一个整数型变量num，初始值为1
        <br/>double decimal {}; // 定义一个小数型变量decimal，初始值为0.0。<strong style="color:red">注意：花括号内没有任何东西时，初始化为该类型所对应的“零值”。C++所有的内置类型都有其对应的零值。</strong>
        <br/>QPoint pos {10,20}; // 定义一个点，坐标值为(10, 20)。注意<strong>QPoint不是内置类型</strong>
    </div>

    <br/>
    <br/>C++保留了C语言的<span style="color:red">老旧</span>的等于号初始化，以至于到现在依然有很多<span style="color:red">不规范</span>的代码在使用等于号初始化。
    <br/>相比等于号初始化，花括号初始化至少有以下两个优点：

    <h2>防止窄化转换</h2>
    所谓”窄化转换“，是指一个变量被赋与了不合适的类型的值，以至于丢失数据或溢出：
    <br/>int awful = 3.14; // 丢失数据！awful的值为3
    <br/>unsigned overflow = -1; // 溢出！overflow的值未定义，但一定不是-1
    <br/>使用等于号初始化发生的窄化转换，不会激发编译器的报错。因此以上两条代码居然是合法的！
    <br/>你单看以上两条代码，也许会认为程序员可以很轻松地规避这样的错误。但是：
    <br/>int tm = time(nullptr); // <strong style="color:red">糟！糕！透！顶！使用这条代码的程序会在2038年1月19日03:14:07发生故障！编译器没有任何提示</strong>
    <br/>int tm {time(nullptr)}; // 编译器报错：无法将time_t（等价于long long）类型的值赋与int类型的变量tm。无法通过编译
    <br/><em>time_t tm {time(nullptr)};</em> // 优雅！
    <br/>可悲的是，第一条的代码广泛存在，而程序员却不自知。也就意味着，在2038年会突然有一大批人和公司为他们不规范的代码付出代价。
    <br/>因此，我一直强调代码规范的重要性。代码规范可绝对<strong>不仅仅</strong>是为了使代码美观好看。

    <h2>统一初始化方式</h2>
    花括号初始化器可以接受多个参数，而有些愚蠢的初始化方式只能接受一个参数。
    <br/>int array[] { 1, 2, 3, 4, 5 }; // 中间不需要等于号
    <br/>QColor color {102,204,255}; // <span style="color:#66CCFF">天依蓝，其HTML/CSS颜色代码为 color:#66CCFF</span>
    <br/>可以看到，借助花括号初始化可以接受多个参数的优点，C++成功统一了内置类型（包括数组类型）和用户自定义类型（在其他一些语言中叫“引用类型”）的初始化方式，而且非常简洁。
    <br/>所以，花括号初始化器又有<span style="color:red">统一初始化器</span>的美称。

    <h2>作业</h2>
    1.请用两种规范的初始化方式和一种不规范的初始化方式分别初始化三个空指针。
    <br/>2.思考题（没学过Java的同学可以不做这道题）：B站上有人声称，Java语言的设计既优雅又简单，而C++的设计理念既凌乱又繁琐。你认为这样的观点是否正确？请至少说出两个理由。
</div>

题中题答案：
规范的初始化方式：
int* ptr {};        // 默认为空指针
int* ptr2 {nullptr};
不规范的初始化方式，任写其一：
int* ptr3 {0};      //　在C++中请使用nullptr表示空指针。用整数表示指针会在一些类型敏感的地方（如将来会讲到的“函数重载”）出现问题
int* ptr4 {NULL};       // NULL也一样是0，是整数类型！在<stddef.h>中定义的 #define NULL 0
int* ptr5 = nullptr;        // 经典等于号
以上三条代码虽然并没有错误，但是并不规范。我们写程序一定不只是追求暂时没有错误，我们将代码写得规范一些可以增强代码在将来的可维护性和可理解性。
