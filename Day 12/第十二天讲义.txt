1.引用

“引用”，顾名思义，它的作用是引用到另一个对象。这一点和指针类似。

int num {1};
int& ref {num};        // 现在ref是num的引用，以后使用ref等同于使用num
ref = 2;       // 现在num也等于2，因为ref是num的引用
cout << num;        // 输出2

从上述代码我们可以看出，ref成为num的引用，不管是赋值还是其他所有对于ref的操作都等价于操作num本身。

引用除了用于函数参数以外，常用于范围for

2.范围for

相比C语言，C++引入了一种全新的for循环。这种for循环被后来的几乎所有语言所“借鉴”。

// 有一个vector<int>类型的array变量
for (auto& x : array)       // 意为“对于array中的每一个x”
    x += 2;

上述代码将array这个容器中的每一个值都增加了2。
我们可以发现，x是一个引用。通过范围for循环，x依次引用了array中的每一个对象。

如果不加引用符&，那么x只是array中元素的副本而已：
for (auto x : array)
    x += 2;     // 屁用没有，因为x只是array中元素的副本

推荐使用范围for作为遍历容器的默认方式。

3.自增自减

自增自减运算符是指++和--运算符。
++的含义是令变量自增1，--的含义是令变量自减1

int num {1};
++num;      // num自增1，现在num为2
--num;      // num自减1，现在num为1
cout << ++num;      // num先自增，然后再输出。所以输出2

自增和自减运算符都可以前置，也可以后置。前置和后置的区别在于，当自增自减运算作为其他表达式的一部分时，采用其原先的值还是结果的值：
int num {1};
int a {++num};      // num先自增，然后才赋值给a。现在num和a都是2
int b {num++};      // num先赋值给b，然后才自增。现在b是2，num是3

一般前置的自增运算符用得更多一些，后置的并不常用到

如果一个变量i使用了自增或自减运算符，那么这个变量在这条语句中绝对不允许出现第二次：
int a {(i++)+(i++)+(i++)};      // 错误！i使用了自增运算符，所以i只能出现一次。这里出现了3次
a = (++i)+i;    // 错误！i使用了自增运算符，所以i只能出现一次。这里出现了2次
a = ++a;        // 错误！a使用了自增运算符，所以a只能出现一次。这里出现了2次
a = ++i;        // 正确。i使用了自增运算符，且在本条语句中只出现一次

4.迭代器

所有的容器都实现了其迭代器。迭代器就像指针一样指向了数组中的某个元素：
vector<int> array { 1, 2, 3 };
auto iter = array.begin();      // .begin()方法可以获得指向第一个元素的迭代器，可以用*号引用到其指向的元素
*iter = 3;      // 数组第一个元素变为3
++iter;     // 现在iter指向第2个元素
cout << *iter;      // 输出2，因为数组第二个元素是2
*iter++ = 4;        // 等价于*(iter++)=4，先将第2个元素赋值为4，然后将迭代器指向第三个元素。

迭代器就像指针一样，也可以执行加法或减法：
iter += 2;      // 迭代器向后移动两个元素
--iter;         // 迭代器向前移动一个元素

array.end()会返回最后一个元素的后一个元素的迭代器，这个迭代器是无法使用的
auto i = array.end();       // i指向最后一个元素的后一个元素
--i;        // 现在i指向最后一个元素

值得注意的是，迭代器使用前置自增自减运算符其性能会高于使用后置自增自减运算符，因为迭代器自增自减的实现方式是通过调用函数：
++iter;     // 通过调用标准库的函数实现
iter++;     // 通过调用另一个不同的标准库函数实现的
已知编译器并不会帮程序员选择函数，所以指望编译器在这里优化性能是无能为力的

所以，请优先使用前置自增自减运算符。

【use pre-inc】

5.普通for

普通for的小括号中包含三条语句，分别是初始化语句、条件语句和迭代语句：

for (int i{}; i!=100; ++i) {
    // 这里的代码将被循环运行100次
}

我们可以看出，for的小括号内有三条语句，用分号隔开。
第一条语句定义一个循环变量i。
第二条语句是循环条件。当i不等于100时，将一直处于循环。意思就是只有i等于100时才能结束循环
第三条语句是每次循环末自动执行的语句，一般用于迭代循环变量。

将上面代码的100换成其他的n，便是计次循环n次的定式。

循环变量i可以在循环的内部使用。它的值是从0到n-1。
for (int i{}; i!=100; ++i) 
    cout << i << '\n';       // 会依次输出0-99这100个整数

i!=100在C语言中常写作i<100。但是在C++中，为了和迭代器的风格统一，换用了!=
后面的++i同理，不使用i++

作业：

1.结合你对for循环和迭代器的理解，解释下面的代码的含义：
// array是一个vector<int>
for (auto i=array.begin(); i!=array.end(); ++i)
    *i = 0;

2.下列说法正确的是：
A.因为前置++和后置++对于整数的性能是相同的，所以前置++和后置++对于任何类型都没有速度区别
B.普通for循环小括号中第二条语句为条件语句，将其!=号改成<号可以保持整数和迭代器的风格一致
C.a = (i++)+(i++) 是错误的写法
D.引用常用于除函数参数和范围for以外的其他用途

3.动手编写一个程序，要求实现以下功能：
（1）用户输入5个小数，存入容器中
（2）用范围for遍历这个容器，求得其平均数
（3）用普通for和迭代器遍历这个容器，求得每个元素与平均值的差的平方的平均值（也就是方差）
（4）输出求得的方差
