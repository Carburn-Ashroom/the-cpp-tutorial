1.代码块
用一对大括号引用起来的多行代码被认为是一个代码块。一个代码块可以被认为是一条语句，尽管它可以由多条语句组成。

int main(int argc, char** argv)
{
    cout.sync_with_stdio(false);
    {
        // 这里是块内
        int block_var {};          // 块内局部变量
        cout << block_var;       // 正常使用block_var
    }
    // 这里是块外
    cout << block_var;       // 错误！块内声明的变量不能在块外使用
    return 0;
}

以上代码中，在main函数的里面多出来一对大括号，大括号内含有多条语句。大括号和多条语句一同组成一个代码块。代码块可以被视为是一个整体，是一条语句。

在代码块内可以声明和定义块内局部变量。块内局部变量不能在块外使用。

我知道你在想什么。函数本身所拥有的那对大括号是不是代码块的标志呢？
很遗憾，并不是。函数本身所拥有的那对大括号是固定的语言语法，它并非表示一个代码块。

2.if和else

if语句是一种最简单的流程控制语句。它的格式为：

if (bool类型的条件) 
    如果条件为true，则运行这一条语句。

示例：
if (var == 0)
    cout << "变量var的值为0";

从代码规范的角度考虑，if和小括号之间一般有一个空格，if所管辖的语句需要比if多四个空格的缩进。

要注意等于运算符是两个等号==，不要写成赋值运算符=。编译器可以很轻易地发现这样的问题。

有的人喜欢写成这样的形式：if (0 == var) 
他们声称是为了避免将==写成=
因为编译器无法通过 if (0 = var) 的写法，会报错

实践证明：就算你写成 if (var = 0) ，编译器也很轻易地能够发现这样的失误，并以警告的形式报告出来。所以没有必要更换顺序

var是测试目标，0是测试工具。人类的习惯是先注意到测试目标，然后才考虑测试工具。所以把测试工具放在测试目标前是反人类的行为，严重影响代码可读性。
我们没有必要为了迁就一些杞人忧天的问题，去改变常规的书写形式。

【dont snub object】

if中的条件运算符不允许连续，这意味着以下的写法是错误的：

if (0 <= score < 60)
    cout << "差。代码也是。";

0 <= score < 60  会被解释为  (0 <= score) < 60，括号中是一个bool类型的表达式，要么是0要么是1，它一定小于60。所以无论score是几，代码都会运行。

请将它拆开，写成  if (score>=0 and score<60)  的形式。

if所管辖的语句可以是一个代码块。

if (bool类型的条件) {
    由于用大括号括住了，所以这里可以写多行代码
    多行代码
    多行代码...
}

if之后可以跟一个可选的else。else也管辖一条语句或一个代码块，表示当if中条件不成立时运行的语句：

if (bool类型的条件)
    如果条件成立，就运行这条语句或代码块
else 
    如果条件不成立，就运行这条语句或代码块

if和else合起来是一条语句，无法拆分。也就是说else不是独立的一条语句。请观察以下示例代码：

if (choose == 1)
    if (answer == 0)
        cout << "答案正确！";
    else 
        cout << "答案错误！";

以上代码先检测一个名为choose的变量。如果它是1，就检查answer。很明显，0是正确答案。
我们要注意的是，以上代码竟然一个大括号都没有，包括外层的if。也就是说，内层的if和else被整体当作一条语句，被外层if所管辖。

else属于最近的if，所属关系不受缩进干扰。所以请避免如下代码：

if (choose == 1)
    if (answer == 0)
        cout << "答案正确！";
else 
    cout << "选择不是1的时候...吗？";

观察以上代码。很明显程序员希望else属于外层if。但是很遗憾的是，它属于内层if。因为内层的if离else更近一些。也就是说，这个else是在选择是1且答案不正确时运行的
我们加一个大括号以避免这样的问题：

if (choose == 1) {
    if (answer == 0)
        cout << "答案正确！"
}
else 
    cout << "这个else匹配外层if，因为内层if被大括号所隔离了";

就代码规范而言，如果两层if跟一个else，则外层if一定要带大括号，无论else属于哪个if。
所以我们把最初的那个代码也写成规范的形式吧：

if (choose == 1) {
    if (answer == 0)
        cout << "答案正确！";
    else 
        cout << "答案错误！";
}

3.switch

【switch switchs if】

之所以说switch版本更好，是因为它清晰地指出了这段代码的目的，也就是检查给定的val究竟是哪一个常量。而且switch只检查一次val，而if需要检查很多次。注意val不能是小数或字符串

switch的每一个分支的结尾都必须有一个结束语句，可以是break或return。千万不要忘记！break的作用是跳出switch，而return的作用是结束整个函数
如果没有结束语句的话，程序将会继续执行下一个分支，这常常是错误的。如果确实需要继续执行下一个分支，做好注释。一个没有结束语句的case分支，若没有注释，则倾向于认为这个代码是写错了。

default分支是可选的。如果所有case都没有“命中”，则执行default分支。如果没有default分支，就什么都不执行。

当我们要在switch中声明或定义新变量时，就应当使用花括号将该变量的作用域限定在该case分支中：

switch (i) {
case 1: {
    int foo {};     // 变量的定义应当在花括号分支内
    // 使用该变量
    break;
}
case 2:
    // 其他分支，不能在其中使用foo
    break;
}

如果不使用花括号限定switch分支变量的作用域，则可能会出现“跳跃声明”的问题：

【jump decl】

4.while和do-while

while (bool类型的条件)
    如果条件为真，就循环运行该语句（块），直到条件为假为止。

以下是将一个正整数转化为一个二进制字符串的代码，你能看明白吗？

string result;
while (num != 0) {
    result.insert(result.begin(), (num&1) ? '1' : '0');
    num >>= 1;
}

可以看到，while将条件放在循环体的前面，也就是说它会在循环体执行前就检测条件。如果想在循环体后面检测条件，可以使用do-while 

int num;
do {
    cout << "请输入一个正整数：";
    cin >> num;
} while (num <= 0);

注意do-while语句的while后面是有分号的。

无论在while还是for循环中，都可以使用continue和break。continue可以跳过本次循环（跳转到条件部分），break可以跳出循环。

5.普通for循环

普通for循环的格式如下：

for (初始化; 条件; 迭代)
    循环体

四个部分全都可以省略。如果省略条件部分，将进行无限循环。

有两种非常常见的无限循环方式：
for ( ; ; )
while (true)

for ( ; ; ) 读作"forever"，教材中使用这种无限循环的方式，本教程也使用for作为无限循环。但是见到while你也必须要懂，因为while (true)也同样十分常见。

使用无限循环有两种场景，一种是循环条件在循环体中间，另一种是循环条件比较复杂（需要多行）

int num;
for ( ; ; ) {
    cout << "请输入一个正整数：";
    cin >> num;
    if (num > 0)        // 循环条件在中间
        break; 
    cerr << "必须输入正数\n";
}

无限循环的格式还很多，我们需要且只需要掌握前两种就可以了：

【forever meme】

作业：

1.用户输入两个整数，要求两个整数都是正数。如果不是，让用户重新输入，直到两个整数都是正数为止

2.辗转相除法可以求得两个正整数的最大公因数。每次让除数与余数相除，直到余数为0时除数是最大公因数。
例如，求1997和615的最大公约数：
1997 ÷ 615 = 3（余152）
615 ÷ 152 = 4（余7）
152 ÷ 7 = 21（余5）
7 ÷ 5 = 1（余2）
5 ÷ 2 = 2（余1）
2 ÷ 1 = 2（余0）
至此，最大公约数为1。

请编写代码实现辗转相除法。
