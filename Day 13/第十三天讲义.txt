第十三天，我们更深入地了解一下容器

1. insert(pos, value)方法

C++的容器拥有.insert方法，可以将一个元素插入到pos之前（不是之后）。pos是一个迭代器：
vector<int> array { 0, 1, 2, 3 };
auto iter = array.begin()+2;    // iter是个迭代器，指向2
array.insert(iter, 4);          // 现在array是{ 0, 1, 4, 2, 3 }

将迭代器保存到变量里面是个坏习惯，所以我们可以简化为以下写法：
array.insert(array.begin()+2, 4);       // 避免将迭代器保存到变量中

直接使用begin()迭代器，可以实现前插：
vector<int> array { 0, 1, 2 };
array.insert(array.begin(), 3);     // 向最前方插入一个3

虽然容器是可变长度的，但是在底层实现中，它仍然占用固定大小的内存，这块内存的大小>=容器内元素的总大小。
无论是push_back()方法，还是insert()方法，都会增大容器内元素的数量。如果超过了容器的固定内存，容器会重新申请一块更大的内存，然后将所有元素移动到新的内存区域。原先的内存会被释放，原先所有元素的引用和迭代器全部失效

也就是说，push_back()和insert()方法可能使原先所有元素的引用和迭代器全部失效

正是由于元素引用和迭代器常常失效的缘故，我们才不应当将容器内元素的引用或迭代器保存到变量中。毕竟谁知道它们什么时候失效呢？

2. erase方法

array.erase(pos)可以删除pos这个迭代器指向的元素
该函数拥有返回值，它返回一个新迭代器，指向pos处的新元素——也就是被删除的元素的下一个元素：

vector<int> array { 0, 1, 2, 3 };
auto iter = array.begin()+2; 
iter = array.erase(iter);       // array.erase方法删除了2，然后返回了指向3的新迭代器。现在iter指向3

下面这个示例程序，使用erase删除了数组中所有的偶数：
vector<int> array { 2, 3, 4, 5, 6 };
for (auto i=array.begin(); i!=array.end(); )             // 注意这里没有++i
    if (*i % 2 == 0)
        i = array.erase(i);
    else
        ++i;

以上代码将迭代器保存到循环变量i中。虽然我们认为迭代器不应保存到变量中，但是由于循环变量作用域非常小，i在for循环之外就无法使用了，所以我们可以认为风险并不大。
要注意到的是，我们介绍过的所有遍历容器的方式，都免不了将元素的引用或迭代器保存到循环变量中。

vector的其他方法，请参见 https://zh.cppreference.com/w/cpp/container/vector

3.倒序迭代器

array.rbegin()返回其最后一个元素的倒序迭代器，array.rend()返回其最前一个元素之前的元素的迭代器

注意：对一个倒序迭代器使用++，它会指向前一个元素而不是后一个元素。--会指向后一个元素

倒序迭代器的存在是为了方便倒序遍历容器。以下是倒序遍历容器的标准格式：
vector<int> a { 1, 2, 3, 4, 5 };
for (auto i=a.rbegin(); i!=a.rend(); ++i) 
    cout << *i << ' ';

输出： 
5 4 3 2 1 

4.标准算法库<algorithm>

算法库提供大量用途的函数（例如查找、排序、计数、操作）。这些函数常常接受两个迭代器作为范围
注意范围定义为 [first, last) ，其中 last 指向最后的元素的后一个元素。不是最后一个元素！

注意算法库中所有的函数都是全局函数，不是vector的方法。

（1）fill函数
std::fill(first, last, value)函数将value赋值给[first, last)范围内的所有元素。

vector<int> array(10);
std::fill(array.begin(), array.begin()+5, 1);       // 注意不是array.fill
for (auto n : array)
    cout << n << ' ';

输出：
1 1 1 1 1 0 0 0 0 0 

（2）sort函数
std::sort(first, last)函数对[first, last)范围内的元素进行升序排序。

vector<int> array { 1, 1, 4, 5, 1, 4 };
std::sort(array.begin(), array.end());
for (auto n : array)
    cout << n << ' ';
    
输出：
1 1 1 4 4 5 

std::reverse(first, last)函数反转范围中元素的顺序。可以配合sort函数进行倒序排序：

vector<int> arr { 1, 9, 1, 9, 8, 1, 0 };
std::sort(arr.begin(), arr.end());
std::reverse(arr.begin(), arr.end());       // 反转
for (auto n : arr)
    cout << n << ' ';

输出： 
9 9 8 1 1 1 0 

（3）使用倒序迭代器
如果对算法库使用倒序迭代器，则算法库会按倒序处理容器元素。

比如说，如果对std::find使用倒序迭代器，它将会进行倒序查找。如果对std::sort函数使用倒序迭代器，它将会一步到位地进行倒序排序，不再需要std::reverse

vector<int> arr { 0, 7, 2, 1 };
std::sort(arr.rbegin(), arr.rend());
for (auto n : arr)
    cout << n << ' ';

输出： 
7 2 1 0

（4）
更多算法函数参见 https://zh.cppreference.com/w/cpp/algorithm

作业：

完成一个程序，实现下列功能：
（1）用户输入10个小数，保存到容器中
（2）将这些数字按升序排序
（3）用户再输入一个数字，将该数字插入到合适的位置，使得容器内元素依然有序
（4）倒序遍历并输出该容器的所有数字

【work】
