今天我们了解一下变量的声明

变量声明最常见的格式是：
类型 声明符 {可选的初始化器}

1.声明符

声明符是变量名和其前缀与后缀的总和。前缀（若有）常常是*和&，后缀（若有）常常是[]：

int num {};             // 类型为int，声明符为num，初始化器为{}，定义了一个初始值为0的整数
int* ptr {};            // 类型为int，声明符为*ptr，初始化器为{}，定义了一个指针，其初始值为空指针
int& ref {num};         // 类型为int，声明符为&ref，初始化器为{num}，定义了num的引用
int arr[] { 1, 2, 3 };  // 类型为int，声明符为arr[]，初始化器为{ 1, 2, 3 }，定义了一个整数的传统数组
int* matrix[] { ptr };  // 类型为int，声明符为*matrix[]，初始化器为{ arr }，定义了一个指针的数组

关于*和&的靠向，这是一个仁者见仁智者见智的问题。市面上常见的有三种写法：
int *num; 
int* num; 
int * num;

C语言之父喜欢靠右，C++之父喜欢靠左。因此我个人在写C语言时喜欢靠右，写C++时喜欢靠左。
无论靠向哪里，三种写法并无高下之分。我们在形成自身的代码风格的基础上，要尊重他人（同样优秀）的代码风格。

虽然三种写法并无高下之分，但是并不意味着可以任意选择。
我们应当选择一种写法坚持下去，而不是交替出现三种写法。如果你的代码中出现了多种写法，这本身又会成为糟糕的代码风格——没有风格是最糟糕的代码风格。
我们不仅要尊重他人（优秀）的代码风格，也要形成自己的代码风格。代码风格应当从学习中融会贯通而来，而不要乱来

值得注意的是，我并没有强调风格的绝对不可更改性。
我们在不断学习，代码风格也在不断优化。如果我们在学习中承诺不改变不进化代码风格，那么很多学习都没有意义。

很多人要求自己写过的所有代码都要保持最优秀的代码风格。这意味着他们每一次改动其代码风格，都要修改自己以往的全部代码。
当他们代码越写越多，会发现改动代码风格的代价越来越大。于是他们开始拒绝进化自己的代码风格，希望保留自己往常代码中较为糟糕的代码风格并运用到自己未来的代码中。

我们不必苛责自己过去写过的代码，只需要将优秀的代码风格用在自己现在和未来的代码中即可

2.初始化器

【task1】
【task2】

这是第三天的作业，本身也是很重要的知识点。

如果想要学习我的教程（不想就算了），就必须完成我所有的作业。如果你不完成我的作业，那么你连本教程十分之一的内容都学不到。
纸上得来终觉浅，绝知此事要躬行。我们工科是注重实践的学科，学编程不写代码就好比学美术不画画，学体育只看书。更何况，我的作业中还有很多新的知识点。

3.变量名

“标识符”可以作变量名、常量名、函数名、类名、名字空间名等等。标识符一般以字母开头，其后可以跟随字母、数字、下划线等等。标识符区分大小写
如果是UTF-8编码，你也可以使用中文、日文、韩文、俄文、阿拉伯文等一切非标点符号的语言作为标识符

但是，程序员应当使用英语作为变量名。如果使用其他语言，你的代码将无法与国际接轨。这对于很多国际化的大项目是非常不利的。
我平常很不理解那些用拼音当变量名的程序员，为什么不直接用中文呢？

C++关键字（比如new和int）不能作为标识符。

不要使用下划线和数字开头的名字。下划线开头的名字可能被编译器预定义用作特殊用途，而数字开头的名字不能作为标识符。

我们应当为变量谨慎起名，一个好的变量名对于程序的可读性来说非常重要。拒绝使用没有含义的变量名。
单字母变量并不一定是无含义的变量名，比如i作为下标（index或iterator的缩写）、x,y作为点坐标等等，都是有含义的变量名，不会危害程序的可读性。多字母变量也不一定是有含义的变量名，比如foo、bar等。一个变量名是否有含义，应当看程序员在起名时是否真的赋予了含义

当一个变量名需要使用多个单词时，常用下划线命名法或小驼峰命名法分隔这些单词

（1）下划线命名法
单词之间使用下划线进行分隔，例如name_of_spec。这样的命名方式易读而不易写。我们的配套教材（C++程序设计语言）推荐使用下划线命名法编写C++代码，C++关键字和标准库也默认采用下划线命名。

（2）小驼峰命名法
第一个单词小写，其后的每个单词首字母大写，例如nameOfSpec。这样的命名方式易写而不易读。首字母也可以大写，称为“大驼峰”，大驼峰一般用作类名，不用于变量名。Qt默认采用驼峰命名法。

两种命名方式亦无高下之分。应当选择一种坚持下来，同时尊重他人的选择。就我个人而言，我习惯在C++、Python等语言中使用下划线命名法（但Python的类名要用大驼峰），在Java、JavaScript等语言中采用驼峰命名法

在为变量命名时，我们的变量名应当反映变量的含义或用途，而不应当暴露其实现细节（实现方式）。比如当我们要保存学生的名字时，我们应当使用name而不是text。

【dont expose type in name】

【hungarian】

4.行内声明多个变量

【multy name in single line】

作业：

选择下列说法正确的一项：
A.驼峰命名法天下无敌，下划线命名法一坨狗屎
B.下划线命名法天下无敌，驼峰命名法一坨狗屎
C.我国外交政策提倡“求同存异”的方针，该方针由周恩来总理在万隆会议中提出
D.Java就是烂语言，C++就是好语言
